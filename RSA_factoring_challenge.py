# Stanford University
# Cryptography I
#
# Week 6
# Questions 1-2
# RSA Factoring Challenge
#
# Your goal in this project is to break RSA when the public modulus N is generated incorrectly.
# This should serve as yet another reminder not to implement crypto primitives yourself.
#
# Normally, the primes that comprise an RSA modulus are generated independently of one another.
# But suppose a developer decides to generate the first prime p by choosing
# a random number RR and scanning for a prime close by.
#
# The second prime q is generated by scanning for some other random prime also close to R.
# We show that the resulting RSA modulus N=pq can be easily factored.
#
# Suppose you are given a composite NN and are told that NN is a product of two relatively close primes p and q,
# namely p and q satisfy
# |p - q| < 2N^{1/4}.
# Your goal is to factor N

import gmpy2
import math


class bad_rsa:
    def __init__(modN, N):
        modN.N = N
        modN.computePrime()

    def computePrime(modN):
        for i in range(1, 2 ** 20):
            modN.A = gmpy2.isqrt(modN.N) + i
            modN.calcX()
            if modN.verify():
                print("The smaller of the two factors is: ")
                print(modN.p)
                break

    def calcX(modN):
        Asquared = gmpy2.mul(modN.A, modN.A)
        remainder = gmpy2.sub(Asquared, modN.N)
        modN.x = gmpy2.isqrt_rem(remainder)[0]

    def verify(modN):
        modN.p = gmpy2.sub(modN.A, modN.x)
        modN.q = gmpy2.add(modN.A, modN.x)
        if gmpy2.mul(modN.p, modN.q) == modN.N:
            return True
        else:
            return False


# Factoring Challenge 1
# Following modulus N is a products of two primes p and q where |p - q| < 2 N^{1/4}
# Find the smaller of the two factors and enter it as a decimal integer.

challenge1 = gmpy2.mpz('17976931348623159077293051907890247336179769789423065727343008115' +
                  '77326758055056206869853794492129829595855013875371640157101398586' +
                  '47833778606925583497541085196591615128057575940752635007475935288' +
                  '71082364994994077189561705436114947486504671101510156394068052754' +
                  '0071584560878577663743040086340742855278549092581')

#The following modulus N is a products of two primes p and q where |p - q| < 2^{11} * N^{1/4}
# Find the smaller of the two factors and enter it as a decimal integer.

challenge2 = gmpy2.mpz('6484558428080716696628242653467722787263437207069762630604390703787' +
                  '9730861808111646271401527606141756919558732184025452065542490671989' +
                  '2428844841839353281972988531310511738648965962582821502504990264452' +
                  '1008852816733037111422964210278402893076574586452336833570778346897' +
                  '15838646088239640236866252211790085787877')

a = bad_rsa(challenge1)
b = bad_rsa(challenge2)